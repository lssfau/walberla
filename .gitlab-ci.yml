include:
  - utilities/workflows/ci-common.yaml

stages:
  - Testsuite
  - Code Quality
  - Test Matrix
  - Documentation
  - deploy
  - benchmark

# Workflow definition
# See https://docs.gitlab.com/ci/yaml/workflow/
workflow:
  rules:
    # Run merge request pipelines
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    # Do not run branch pipelines if a merge request exists
    - if: $CI_COMMIT_BRANCH && $CI_OPEN_MERGE_REQUESTS
      when: never
    # Do run branch pipelines otherwise
    - if: $CI_COMMIT_BRANCH


####################################################################################################
#       Every-Commit Test Suite & Coverage Collection
####################################################################################################

testsuite-full (clang-19-hybrid-cuda):
  image: i10git.cs.fau.de:5005/ci/images/spack:clang-19
  stage: Testsuite
  extends: .testsuite-base-patch-clang-19
  variables:
    cmakePresetName: .ci-branch-testsuite
    CC: clang
    CXX: clang++


testsuite-full (icx-2025-hybrid-cuda):
  image: i10git.cs.fau.de:5005/ci/images/spack:icx-2025
  stage: Testsuite
  extends: .testsuite-base-linux
  variables:
    cmakePresetName: .ci-branch-testsuite
    CC: icx
    CXX: icpx


testsuite+coverage (gcc14-hybrid-cuda):
  image: i10git.cs.fau.de:5005/ci/images/spack:gcc-14
  stage: Testsuite
  extends: .testsuite-base-linux
  before_script:
    - !reference [.testsuite-base-linux, before_script]
    - pip install gcovr
    - gcovr --version
  after_script:
    - !reference  [.testsuite-base-linux, after_script]
    - mkdir coverage
    - source .venv/bin/activate
    - >
      gcovr
      -r $CI_PROJECT_DIR
      -f "src"
      --print-summary
      --html coverage/coverage.html --html-details
      --cobertura coverage/coverage.xml
      --gcov-ignore-parse-errors all
      build/${cmakePresetName}
  variables:
    RUNNER_AFTER_SCRIPT_TIMEOUT: 20m
    cmakePresetName: .ci-coverage
    CC: gcc
    CXX: g++
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - coverage/
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage/coverage.xml
    expire_in: 2 days


####################################################################################################
#       Code Quality
####################################################################################################

clang-tidy:
  image: i10git.cs.fau.de:5005/ci/images/spack:clang-19
  stage: "Code Quality"
  needs: []
  before_script:
    - apt-get update; apt-get install -y tree
    - !reference [.testsuite-common, before_script]
  script:
    - cmake --preset ${cmakePresetName}
    - cd build/${cmakePresetName}
    - python3 utilities/clang-tidy/analyze.py -p utilities/clang-tidy/analyze.yml -r ../.. -c compile_commands.json -o clang-tidy-output --html
  after_script:
    - mkdir -p $CI_PROJECT_DIR/artifacts
    - mv $CI_PROJECT_DIR/build/${cmakePresetName}/clang-tidy-output $CI_PROJECT_DIR/artifacts/clang-tidy-output
    - cd $CI_PROJECT_DIR/artifacts/clang-tidy-output
    - tree -H . > index.html
  variables:
    cmakePresetName: .ci-clang-tidy
    CC: "clang"
    CXX: "clang++"
  artifacts:
    when: always
    paths:
      - $CI_PROJECT_DIR/artifacts/clang-tidy-output
    expire_in: 2 days
  tags:
    - docker

python-static-checks:
  image: i10git.cs.fau.de:5005/pycodegen/pycodegen/nox:alpine
  stage: "Code Quality"
  needs: []
  tags:
    - docker
  script:
    - cd sweepgen
    - nox -s lint typecheck

####################################################################################################
#       Test Matrix
####################################################################################################

generate-test-matrix:
   stage: Test Matrix
   image: "python:3.13"
   before_script:
      - pip install pyyaml
   script:
      - cd utilities/workflows
      - python generateWorkflows.py ci-matrix ci-matrix.yaml
   rules:
      # Only activate on non-draft MRs, master, and tags
      - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT == "false"
      - if: $CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      - if: $CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_TAG
   artifacts:
     paths:
       - utilities/workflows/ci-matrix.yaml
     expire_in: 1 day

trigger-test-matrix:
  stage: Test Matrix
  needs: [generate-test-matrix]
  rules:
      # Only activate on non-draft MRs, master, and tags
      - if: $CI_PIPELINE_SOURCE == "merge_request_event" && $CI_MERGE_REQUEST_DRAFT == "false"
      - if: $CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      - if: $CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_TAG
  trigger:
    include:
      - artifact: utilities/workflows/ci-matrix.yaml
        job: generate-test-matrix
    strategy: depend

####################################################################################################
#       Documentation & Pages
####################################################################################################


documentation:
  image: i10git.cs.fau.de:5005/ci/images/spack:gcc-14
  stage: Documentation
  needs: []
  before_script:
    - apt-get update
    - apt-get install -y texlive-base nox # for bibtex and sweepgen manual
  script:
    - cmake --version
    - doxygen --version
    - mkdir $CI_PROJECT_DIR/build
    - cmake -S . -B build/documentation
    - cd build/documentation
    - cmake --build . --target walberla_doc
  tags:
    - docker
  artifacts:
    paths:
      - build/documentation/doc
    expire_in: 1 weeks

pages:
  image: alpine:latest
  stage: deploy
  needs: ["documentation", "testsuite+coverage (gcc14-hybrid-cuda)"]
  script:
    - mv build/documentation/doc/html public
    - mv coverage public/coverage
  artifacts:
    paths:
      - public
  tags:
    - docker
  rules:
    - if: $CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH

###############################################################################
##                                                                           ##
##    Benchmarks                                                             ##
##                                                                           ##
###############################################################################

.benchmark_template: &benchmark_definition
   script:
      - apt-get update --fix-missing
      - apt-get install -y python3-influxdb python3-git
      - $CXX --version
      - cmake --version
      - ccache --version
      - mpirun --version
      - export CCACHE_BASEDIR=$CI_PROJECT_DIR
      - mkdir $CI_PROJECT_DIR/build
      - cd $CI_PROJECT_DIR/build
      - cmake .. -DWALBERLA_BUFFER_DEBUG=OFF -DWALBERLA_BUILD_TESTS=OFF -DWALBERLA_BUILD_BENCHMARKS=ON -DWALBERLA_BUILD_TUTORIALS=OFF -DWALBERLA_BUILD_TOOLS=OFF -DWALBERLA_BUILD_WITH_MPI=ON -DWALBERLA_BUILD_WITH_CUDA=OFF -DWALBERLA_BUILD_WITH_PYTHON=OFF -DWALBERLA_BUILD_WITH_OPENMP=OFF -DCMAKE_BUILD_TYPE=RELEASE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -DWALBERLA_DOUBLE_ACCURACY=ON -DWARNING_ERROR=ON -DWALBERLA_BUILD_WITH_METIS=OFF -DWALBERLA_BUILD_WITH_PARMETIS=OFF -DWALBERLA_OPTIMIZE_FOR_LOCALHOST=ON -DWALBERLA_BUILD_WITH_FASTMATH=ON -DWALBERLA_BUILD_WITH_LTO=ON
      - cmake . -LA
      - cd apps/benchmarks/GranularGas
      - make -j 20
      - export PATH=$PATH:/usr/local/likwid/bin
      - likwid-setFrequencies -t 0
      - likwid-setFrequencies -g performance
      - likwid-setFrequencies -f 3.3 # set frequency to 3.3
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --DEM --syncNextNeighbor | tee GranularGas_DEM_NN.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --DEM --syncShadowOwners | tee GranularGas_DEM_SO.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --HCSITS --syncNextNeighbor --InelasticFrictionlessContact | tee GranularGas_HCSITS_NN_IFC.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --HCSITS --syncNextNeighbor --ApproximateInelasticCoulombContactByDecoupling | tee GranularGas_HCSITS_NN_AICCBD.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --HCSITS --syncNextNeighbor --InelasticCoulombContactByDecoupling | tee GranularGas_HCSITS_NN_ICCBD.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --HCSITS --syncNextNeighbor --InelasticGeneralizedMaximumDissipationContact | tee GranularGas_HCSITS_NN_IGMDC.txt
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./PE_GranularGas PE_Benchmark.cfg --HCSITS --syncShadowOwners --InelasticFrictionlessContact | tee GranularGas_HCSITS_SO_IFC.txt
      - python3 pe_upload.py
      - mpirun --allow-run-as-root -np 8 --map-by core --bind-to core --report-bindings ./MESA_PD_KernelBenchmark MESA_PD_Benchmark.cfg | tee mesa_pd.txt
      - python3 mesa_pd_upload.py
   when: manual
   needs: [ ]
   stage: benchmark
   tags:
      - docker-benchmark
   artifacts:
      paths:
         - $CI_PROJECT_DIR/build/apps/benchmarks/GranularGas/*.txt
         - $CI_PROJECT_DIR/build/apps/benchmarks/GranularGas/*.sqlite

benchmark_intel22:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/intel-2022

benchmark_gcc13:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/gcc-13

benchmark_clang17:
   <<: *benchmark_definition
   image: i10git.cs.fau.de:5005/walberla/buildenvs/clang-17

benchmark_ClangBuildAnalyzer:
  stage: benchmark
  script:
    - cmake --version
    - ccache --version
    - mpirun --version
    - export CC=clang
    - export CXX=clang++
    - $CXX --version
    - cd /tmp
    - git clone https://github.com/aras-p/ClangBuildAnalyzer.git
    - cd ClangBuildAnalyzer
    - cmake .
    - make
    - export PATH+=:$(pwd)
    - mkdir $CI_PROJECT_DIR/build
    - cd $CI_PROJECT_DIR/build
    - cmake .. -DWALBERLA_BUFFER_DEBUG=OFF -DWALBERLA_BUILD_TESTS=ON -DWALBERLA_BUILD_BENCHMARKS=ON -DWALBERLA_BUILD_TUTORIALS=ON -DWALBERLA_BUILD_TOOLS=OFF -DWALBERLA_BUILD_WITH_MPI=ON -DWALBERLA_BUILD_WITH_CUDA=OFF -DWALBERLA_BUILD_WITH_PYTHON=OFF -DWALBERLA_BUILD_WITH_OPENMP=OFF -DCMAKE_BUILD_TYPE=RELEASE -DMPIEXEC_PREFLAGS=$MPIEXEC_PREFLAGS -DWALBERLA_DOUBLE_ACCURACY=ON -DWARNING_ERROR=ON -DWALBERLA_BUILD_WITH_METIS=OFF -DWALBERLA_BUILD_WITH_PARMETIS=OFF -DWALBERLA_OPTIMIZE_FOR_LOCALHOST=ON -DWALBERLA_BUILD_WITH_FASTMATH=ON -DWALBERLA_BUILD_WITH_LTO=ON -DCMAKE_CXX_FLAGS=-ftime-trace -G Ninja
    - cmake . -LA
    - ClangBuildAnalyzer --start .
    - ninja all
    - ClangBuildAnalyzer --stop . CBA
    - ClangBuildAnalyzer --analyze CBA
  image: i10git.cs.fau.de:5005/walberla/buildenvs/clang-17
  tags:
    - docker-benchmark
  only:
     variables:
        - $ENABLE_NIGHTLY_BUILDS

continuous_benchmark_trigger:
  stage: benchmark
  image: curlimages/curl
  tags:
    - docker
  script:
    - curl
      --fail
      --request POST
      --form "token=$CB_TRIGGER_TOKEN"
      --form "ref=master"
      --form "variables[WALBERLA_GITLAB_INSTANCE]=https://$CI_SERVER_HOST"
      --form "variables[WALBERLA_PROJECT_ID]=$CI_PROJECT_PATH"
      --form "variables[WALBERLA_BRANCH]=$CI_COMMIT_BRANCH"
      --form "variables[WALBERLA_COMMIT]=$CI_COMMIT_SHA"
      "$CB_TRIGGER_API_URL"
  rules:
    - if: '$CI_PROJECT_PATH == "walberla/walberla" && $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
      when: on_success